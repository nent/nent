# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: main

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Use Node.js 14.x
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 14.x
      - name: Use cached node_modules
        id: cache
        uses: actions/cache@v2.1.6
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('**/yarn.lock') }}-14.x
          restore-keys: |
            nodeModules-
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn
        env:
          CI: true
      - run: yarn lint
      - run: yarn test
        env:
          CI: true
      - uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: ./packages/core/coverage/
      - name: Coveralls GitHub Action
        uses: coverallsapp/github-action@v1.1.2
        with:
          path-to-lcov: ./packages/core/coverage/lcov.info
          base-path: ./packages/core
          github-token: ${{ secrets.GITHUB_TOKEN }}
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Node.js 14.x
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 14.x
      - name: Cache
        id: cache
        uses: actions/cache@v2.1.6
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('**/yarn.lock') }}-14.x
          restore-keys: |
            nodeModules-
      - name: Yarn
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn
        env:
          CI: true
      - run: yarn build

  publish:
    name: Publish
    needs: build
    runs-on: ubuntu-latest
    env:
      NPM_TOKEN: ${{secrets.NPM_PUBLISH}}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14.14.0
          registry-url: 'https://registry.npmjs.org'
          scope: '@nent'
      - name: Git Identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Install
        run: yarn install
      # Define ${CURRENT_VERSION}
#       - name: Set Current Version
#         shell: bash -ex {0}
#         run: |
#           CURRENT_VERSION=$(node -p 'require("./lerna.json").version')
#           echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
#       - name: Tag Check
#         id: tag_check
#         shell: bash -ex {0}
#         run: |
#           GET_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/v${CURRENT_VERSION}"
#           http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
#             -H "Authorization: token ${GITHUB_TOKEN}")
#           if [ "$http_status_code" -ne "404" ] ; then
#             echo "::set-output name=exists_tag::true"
#           else
#             echo "::set-output name=exists_tag::false"
#           fi
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       - name: Create Git Tag
#         if: steps.tag_check.outputs.exists_tag == 'false'
#         uses: azu/action-package-version-to-git-tag@v1
#         with:
#           version: ${{ env.CURRENT_VERSION }}
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#           github_repo: ${{ github.repository }}
#           git_commit_sha: ${{ github.sha }}
#           git_tag_prefix: "v"
      - name: Create Release
        id: create_release
#         if: steps.tag_check.outputs.exists_tag == 'false' && github.event.pull_request.merged == true
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.CURRENT_VERSION }}
          # Copy Pull Request's tile and body to Release Note
          release_name: ${{ github.event.pull_request.title }}
          body: |
            ${{ github.event.pull_request.body }}
          draft: true
          prerelease: true
      - name: Publish
#         if: steps.tag_check.outputs.exists_tag == 'false'
        run: |
          yarn lerna publish --canary --preid beta --yes --no-verify-access
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH }}
#       - uses: actions/github-script@0.8.0
#         with:
#           github-token: ${{secrets.GITHUB_TOKEN}}
#           script: |
#             github.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: 'https://github.com/${{ github.repository }}/releases/tag/v${{ env.CURRENT_VERSION }} is released ðŸŽ‰'
#             })
