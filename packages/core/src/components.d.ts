/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { EventAction } from "./services/actions";
import { LocationSegments } from "./services/common";
import { ViewTime } from "./components/n-app-analytics/services";
import { AudioActionListener } from "./components/n-audio/services/actions";
import { AudioInfo, AudioRequest } from "./components/n-audio/services/interfaces";
import { ReferenceCompleteResults } from "./services/content";
import { CookieConsent } from "./components/n-data-cookie/services/interfaces";
import { SetData } from "./components/n-data/services/interfaces";
import { EventAction as EventAction1 } from "./services/actions/interfaces";
import { ITimer } from "./components/n-presentation/services/interfaces";
import { Route } from "./components/n-view/services/route";
import { Path } from "./components/n-views/services/utils/path-regex";
export { EventAction } from "./services/actions";
export { LocationSegments } from "./services/common";
export { ViewTime } from "./components/n-app-analytics/services";
export { AudioActionListener } from "./components/n-audio/services/actions";
export { AudioInfo, AudioRequest } from "./components/n-audio/services/interfaces";
export { ReferenceCompleteResults } from "./services/content";
export { CookieConsent } from "./components/n-data-cookie/services/interfaces";
export { SetData } from "./components/n-data/services/interfaces";
export { EventAction as EventAction1 } from "./services/actions/interfaces";
export { ITimer } from "./components/n-presentation/services/interfaces";
export { Route } from "./components/n-view/services/route";
export { Path } from "./components/n-views/services/utils/path-regex";
export namespace Components {
    /**
     * This element just holds data to express the actionEvent to fire. This element
     * should always be the child of an n-action-activator.
     * @system actions
     */
    interface NAction {
        /**
          * The command to execute.
         */
        "command": string;
        /**
          * Get the underlying actionEvent instance. Used by the n-action-activator element.
         */
        "getAction": () => Promise<EventAction<any> | null>;
        /**
          * Send this action to the action messaging system.
         */
        "sendAction": (data?: Record<string, any>) => Promise<void>;
        /**
          * This is the topic this action-command is targeting.
         */
        "topic": string;
        /**
          * A predicate to evaluate prior to sending the action.
         */
        "when"?: string;
    }
    /**
     * This element defines how or when a group of actions are
     * activated. The actions activated must be included between
     * this elements tags.
     * @system actions
     */
    interface NActionActivator {
        /**
          * The activation strategy to use for the contained actions.
         */
        "activate": | 'on-render'
    | 'on-element-event'
    | 'on-enter'
    | 'at-time'
    | 'at-time-end'
    | 'on-exit';
        /**
          * Manually activate all actions within this activator.
         */
        "activateActions": (once?: boolean) => Promise<void>;
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug": boolean;
        /**
          * Limit the activation to ONCE. This could be helpful if an action has side-effects if it is run multiple times.  Note: the activation state is stored in memory and does not persist across refreshes.
         */
        "once": boolean;
        /**
          * The element or elements to watch for events when using the OnElementEvent activation strategy. This element uses the HTML Element querySelectorAll function to find the element/s based on the query in this attribute.  If left blank, this element looks for child elements matching: 'a,button,input[type=button]'  For use with activate="on-element-event" and "at-time"
         */
        "targetElement"?: string;
        /**
          * This is the name of the event/s to listen to on the target element separated by comma.
         */
        "targetEvent": string;
        /**
          * The time, in seconds at which the contained actions should be submitted.  For use with activate="at-time" Only!
         */
        "time"?: number;
    }
    /**
     * This component enables app services. These are console logging,
     * theming and event-delegation. As well as a plugin system to
     * manage a UI kit to add components like Modals, Drawers,
     * menus, etc.
     * @system app
     * @extension actions
     * @extension custom
     * @extension elements
     */
    interface NApp {
        /**
          * This is the application default page description.
         */
        "appDescription"?: string;
        /**
          * This is the application default page keywords.
         */
        "appKeywords"?: string;
        /**
          * This is the application / site title. If the views have titles, this is added as a suffix.
         */
        "appTitle"?: string;
        /**
          * Turn on debugging to get helpful messages from the app, routing, data and action systems.
         */
        "debug": boolean;
    }
    /**
     * This element serves as a proxy to delegate event-based
     * functions to be consumed by various analytics snippets.
     * @system app
     * @extension actions
     */
    interface NAppAnalytics {
        /**
          * Turn on debugging to get helpful messages from the app, routing, data and action systems.
         */
        "debug": boolean;
    }
    /**
     * This element leverages the browser's web-share
     * API to give the application a native-app feel.
     * @system app
     */
    interface NAppShare {
        /**
          * Headline for the share
         */
        "headline"?: string;
        /**
          * Manual share method for more complex scenarios
          * @param data
         */
        "share": (data?: { title?: string; text?: string; url?: string; } | null) => Promise<void>;
        /**
          * The textual body of web share
         */
        "text"?: string;
        /**
          * The URL we are sharing
         */
        "url"?: string;
    }
    /**
     * This element checks for the preferred light/dark theme preference of the
     * user and sets the ui state: theme, accordingly.
     * @system app
     */
    interface NAppTheme {
        /**
          * Change the class name that is added to the target element when the theme is determined to be dark.
         */
        "darkClass": string;
        /**
          * Display the user's system preference.
         */
        "display": boolean;
        /**
          * This element displays the current theme, unless in switch-mode, it will show the opposite.
         */
        "switch": boolean;
        /**
          * Change the element that is decorated with the dark-mode class
         */
        "targetElement": string;
    }
    /**
     * This element displays a checkbox to control the
     * dark-theme setting applied to the ui.
     * Default: user-preference
     * @system app
     */
    interface NAppThemeSwitch {
        /**
          * The class to add to the inner input.
         */
        "inputClass"?: string;
        /**
          * The inner input ID
         */
        "inputId"?: string;
    }
    /**
     * Use this element only once per page to enable audio features.
     * It will add a CDN reference to Howler.js:
     * <https://cdn.jsdelivr.net/npm/howler@2.2.3/dist/howler.core.min.js>
     * @system audio
     * @extension actions
     * @extension provider
     */
    interface NAudio {
        /**
          * A reference to the action listener for testing.
         */
        "actions"?: AudioActionListener;
        /**
          * Experimental support for providing audio-data in the data-provider system.
         */
        "dataProvider": boolean;
        /**
          * Use debug for verbose logging. Useful for figuring things out.
         */
        "debug": boolean;
        /**
          * The display mode enabled shows player state and stats. No track information or duration is to be displayed.
         */
        "display": boolean;
        /**
          * The Howler.js Script Reference
         */
        "howlerVersion": string;
    }
    /**
     * This element represents an action to be fired. This
     * specialized action encapsulates required parameters
     * needed for audio-based actions, for music.
     * @system audio
     * @system actions
     */
    interface NAudioActionMusic {
        /**
          * The command to execute.
         */
        "command": | 'start'
    | 'pause'
    | 'resume'
    | 'mute'
    | 'volume'
    | 'seek';
        /**
          * Get the underlying actionEvent instance. Used by the n-action-activator element.
         */
        "getAction": () => Promise<EventAction<any> | null>;
        /**
          * Send this action to the the action messaging system.
         */
        "sendAction": (data?: Record<string, any>) => Promise<void>;
        /**
          * Readonly topic
         */
        "topic": "audio";
        /**
          * The track to target.
         */
        "trackId"?: string;
        /**
          * The value payload for the command.
         */
        "value"?: string | boolean | number;
        /**
          * A predicate to evaluate prior to sending the action.
         */
        "when"?: string;
    }
    /**
     * This element declares audio used within this \<n-view-prompt\> route.
     * The \<n-audio-action-sound-load\> instructs the player to load audio files
     * while defining play behaviors.
     * The audio player will pre-load or play when the route is active.
     * The player manages them according to their settings.
     * @system audio
     * @system actions
     */
    interface NAudioActionMusicLoad {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * The discard strategy the player should use for this file.
         */
        "discard": 'route' | 'next' | 'none';
        /**
          * Get the underlying actionEvent instance.
         */
        "getAction": () => Promise<EventAction<AudioInfo | AudioRequest | any>>;
        /**
          * Set this to true to have the audio file loop.
         */
        "loop": boolean;
        /**
          * This is the loading strategy that determines what it should do after the file is retrieved.
         */
        "mode": 'queue' | 'play' | 'load';
        /**
          * Send this action to the the action messaging system.
         */
        "sendAction": (data?: Record<string, any>) => Promise<void>;
        /**
          * The path to the audio-file.
          * @required
         */
        "src": string;
        /**
          * The identifier for this music track
         */
        "trackId": string;
    }
    /**
     * This element represents an action to be fired. This
     * specialized action encapsulates required parameters
     * needed for audio-based actions, for sound.
     * @system audio
     * @system actions
     */
    interface NAudioActionSound {
        /**
          * The command to execute.
         */
        "command": | 'start'
    | 'pause'
    | 'resume'
    | 'mute'
    | 'volume'
    | 'seek';
        /**
          * Get the underlying actionEvent instance. Used by the n-action-activator element.
         */
        "getAction": () => Promise<EventAction<any> | null>;
        /**
          * Send this action to the the action messaging system.
         */
        "sendAction": (data?: Record<string, any>) => Promise<void>;
        /**
          * Readonly topic
         */
        "topic": "audio";
        /**
          * The track to target.
         */
        "trackId"?: string;
        /**
          * The value payload for the command.
         */
        "value"?: string | boolean | number;
        /**
          * A predicate to evaluate prior to sending the action.
         */
        "when"?: string;
    }
    /**
     * This element declares audio used within this \<n-view-prompt\> route.
     * The \<n-audio-action-sound-load\> instructs the player to load audio files
     * while defining play behaviors.
     * The audio player will pre-load or play when the route is active.
     * The player manages them according to their settings.
     * @system audio
     * @system actions
     */
    interface NAudioActionSoundLoad {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * The discard strategy the player should use for this file.
         */
        "discard": 'route' | 'next' | 'none';
        /**
          * Get the underlying actionEvent instance.
         */
        "getAction": () => Promise<EventAction<AudioInfo | AudioRequest | any>>;
        /**
          * This is the loading strategy that determines what it should do after the file is retrieved.
         */
        "mode": 'queue' | 'play' | 'load';
        /**
          * Send this action to the the action messaging system.
         */
        "sendAction": (data?: Record<string, any>) => Promise<void>;
        /**
          * The path to the audio-file.
         */
        "src": string;
        /**
          * The identifier for this music track
         */
        "trackId": string;
    }
    /**
     * This element exposes a checkbox to enable or disable global audio for background sounds and video.
     * @system audio
     */
    interface NAudioSwitch {
        /**
          * The data provider to store the audio state in.
         */
        "dataProvider": string;
        /**
          * Any classes to add to the input-element directly.
         */
        "inputClass"?: string;
        /**
          * The id field to add to the input-element directly.
         */
        "inputId"?: string;
        /**
          * Which state property this switch controls.
         */
        "setting": 'muted' | 'enabled';
    }
    /**
     * This component should surround the inner-content of a remote HTML file that can be prioritized during SPA navigation.
     * @system content
     */
    interface NContent {
    }
    /**
     * This element fetches remote HTML and renders it safely and directly
     * into the page when and where you tell it too, as soon as it renders.
     * @system content
     * @extension data
     * @extension elements
     */
    interface NContentInclude {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * The JSONata expression to select the HTML from a json response. see <https://try.jsonata.org> for more info.
         */
        "json"?: string;
        /**
          * Cross Origin Mode
         */
        "mode": 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * Before rendering HTML, replace any data-tokens with their resolved values. This also commands this element to re-render it's HTML for data-changes. This can affect performance.
         */
        "resolveTokens": boolean;
        /**
          * Remote Template URL
         */
        "src": string;
        /**
          * A data-token predicate to advise this element when to render (useful if used in a dynamic route or if tokens are used in the 'src' attribute)
         */
        "when"?: string;
    }
    /**
     * This element converts markdown text to HTML. It can render
     * from an inline-template or from a remote source.
     * @system content
     * @extension data
     * @extension elements
     */
    interface NContentMarkdown {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * The JSONata expression to select the markdown from a json response. see <https://try.jsonata.org> for more info.
         */
        "json"?: string;
        /**
          * Cross Origin Mode
         */
        "mode": 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * Force render with data & route changes.
         */
        "noCache": boolean;
        /**
          * Before rendering HTML, replace any data-tokens with their resolved values. This also commands this element to re-render it's HTML for data-changes. This can affect performance.
         */
        "resolveTokens": boolean;
        /**
          * Remote Template URL
         */
        "src"?: string;
        /**
          * A data-token predicate to advise this element when to render (useful if used in a dynamic route or if tokens are used in the 'src' attribute)
         */
        "when"?: string;
    }
    /**
     * This element makes a single reference to script and css sources. It can
     * be used by HTML fragment to ensure a reference is made, without worrying
     * that it will create duplicate references.
     * @system content
     */
    interface NContentReference {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * Force the 'load' event of the script or link element. This is meant for testing.
         */
        "forceLoad": () => Promise<void>;
        /**
          * When inline the link/script tags are rendered in-place rather than added to the head.
         */
        "inline": boolean;
        /**
          * Import the script file as a module.
         */
        "module": boolean;
        /**
          * Declare the script only for use when modules aren't supported
         */
        "noModule": boolean;
        /**
          * The script file to reference.
         */
        "scriptSrc"?: string;
        /**
          * The css file to reference
         */
        "styleSrc"?: string;
        /**
          * Timeout (in milliseconds) to wait for the references to load.
         */
        "timeout": number;
    }
    /**
     * This tag renders a template for each item in the configured array.
     * The item template uses value expressions to insert data from any
     * data provider as well as the item in the array.
     * @system content
     * @extension data
     * @extension elements
     */
    interface NContentRepeat {
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug": boolean;
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * The JSONata query to filter the json items see <https://try.jsonata.org> for more info.
         */
        "filter"?: string;
        /**
          * The array-string or data expression to obtain a collection for rendering the template. {{session:cart.items}}
         */
        "items"?: string;
        /**
          * The URL to remote JSON collection to use for the items.
          * @example /data.json
         */
        "itemsSrc"?: string;
        /**
          * Force render with data & route changes.
         */
        "noCache": boolean;
        /**
          * A data-token predicate to advise this element when to render (useful if used in a dynamic route or if tokens are used in the 'src' attribute)
         */
        "when"?: string;
    }
    /**
     * Use this element to add a little flair to any HTML.
     * It creates an entrance animation using the configured
     * attributes to add pop to any page.
     * @system content
     */
    interface NContentReveal {
        /**
          * How far the element moves in the animation (% of element width/height)
         */
        "animationDistance": string;
        /**
          * How long to delay the animation (ms)
         */
        "delay": number;
        /**
          * Direction the element moves when animating in
         */
        "direction": 'up' | 'down' | 'right' | 'left';
        /**
          * How long the animation runs (ms)
         */
        "duration": number;
        /**
          * How much of the element must be visible before it animates (% of element height)
         */
        "triggerDistance": string;
    }
    /**
     * This element conditionally renders child elements based on the
     * configured predicate applied to the when value predicate.
     * To learn more about predicates, check out the
     * expressions documentation.
     * @system content
     * @extension data
     */
    interface NContentShow {
        /**
          * The data expression to obtain a predicate for conditionally rendering the inner-contents of this element.
         */
        "when": string;
    }
    /**
     * Render data directly into HTML using declarative expressions.
     * This element renders the expression with all data-tokens
     * replaced with the values provided by the provider.
     * @system content
     * @extension data
     * @extension elements
     */
    interface NContentTemplate {
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug": boolean;
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * The JSONata query to filter the json items see <https://try.jsonata.org> for more info.
         */
        "filter"?: string;
        /**
          * When declared, the child script tag is required and should be the query text for the request. Also, this forces the HTTP method to 'POST'.
         */
        "graphql": boolean;
        /**
          * Cross Origin Mode
         */
        "mode": 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * Force render with data & route changes.
         */
        "noCache": boolean;
        /**
          * The URL to remote JSON data to bind to this template
          * @example /data.json
         */
        "src"?: string;
        /**
          * The data expression to obtain a value for rendering as inner-text for this element.
          * @default null
         */
        "text"?: string;
        /**
          * A data-token predicate to advise this element when to render (useful if used in a dynamic route or if tokens are used in the 'src' attribute)
         */
        "when"?: string;
    }
    /**
     * This element enables the Data Provider system. It hosts
     * the action-listener that registers providers.  Add this tag
     * to that page to enable token-replacement.
     * @system data
     * @extension actions
     * @extension custom
     */
    interface NData {
        /**
          * Turn on debugging to get helpful messages from the data action systems.
         */
        "debug": boolean;
        /**
          * The wait-time, in seconds to wait for un-registered data providers found in an expression. This is to accommodate a possible lag between evaluation before the first predicate and the registration process.
         */
        "providerTimeout"?: number;
    }
    /**
     * This element enables the *Cookie Data Provider*,
     * after requesting consent from the user. The consent
     * message and the accept/reject button are customizable.
     * @system data
     * @extension actions
     * @extension provider
     */
    interface NDataCookie {
        /**
          * Provider name to use in nent expressions.
         */
        "name": string;
        /**
          * Immediately register the provider.
         */
        "registerProvider": () => Promise<void>;
        /**
          * When skipConsent is true, the accept-cookies banner will not be displayed before accessing cookie-data.
         */
        "skipConsent": boolean;
    }
    /**
     * This element enables the **Session Data Provider**.
     * It leverages the short-lived browser storage.
     * @system data
     * @extension actions
     * @extension provider
     */
    interface NDataSession {
        /**
          * The key prefix to use in storage
         */
        "keyPrefix"?: string;
        /**
          * Provider name to use in nent expressions.
         */
        "name": string;
    }
    /**
     * This element enables the **Storage Data Provider**, that
     * leverages the browsers 'long-term' data storage.
     * @system data
     * @extension actions
     * @extension provider
     */
    interface NDataStorage {
        /**
          * The key prefix to use in storage
         */
        "keyPrefix"?: string;
        /**
          * Provider name to use in nent expressions.
         */
        "name": string;
    }
    /**
     * This element enables element manipulation through the n-actions element.
     * Add it to the page to perform actions like 'add-css', toggle
     * attributes or to execute functions on the DOM without code.
     * @system elements
     * @extension actions
     */
    interface NElements {
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug": boolean;
    }
    /**
     * This element encapsulates a timed presentation. This element uses
     * a child n-presentation-timer or n-video element to create time-events
     * then it delegates those events to time-based action-activators.
     * If enabled, the n-attributes for time will also get processed. This
     * element also has the ability to go to the next route using the active
     * route's 'goNext' function.
     * @system presentation
     * @extension elements
     */
    interface NPresentation {
        /**
          * Send analytics view-time percentages for this presentation using the event name
         */
        "analyticsEvent"?: string;
        /**
          * To debug timed elements, set this value to true.
         */
        "debug": boolean;
        /**
          * Go to the next view after the timer ends
         */
        "nextAfter": boolean | string;
        /**
          * The element selector for the timer-element to bind for interval events. If left blank, it looks first an n-timer, then for the first n-video.  If none are found, it creates one manually and starts it immediately
         */
        "timerElement": string | null;
    }
    /**
     * This specialized action contains the time attribute,
     * allowing it to be activated directly within the n-presentation
     * element (no n-action-activator needed)
     * @system presentation
     * @system actions
     */
    interface NPresentationAction {
        /**
          * The command to execute.
         */
        "command": string;
        /**
          * Get the underlying actionEvent instance. Used by the n-action-activator element.
         */
        "getAction": () => Promise<EventAction1<any> | null>;
        /**
          * Send this action to the action messaging system.
         */
        "sendAction": (data?: Record<string, any>) => Promise<void>;
        /**
          * The time this should execute
         */
        "time"?: number | 'end';
        /**
          * This is the topic this action-command is targeting.
         */
        "topic": string;
        /**
          * A predicate to evaluate prior to sending the action.
         */
        "when"?: string;
    }
    /**
     * This element creates a timer for the presentation
     * element to use in place of a video, to time actions
     * or manipulate HTML by time.
     * @system presentation
     */
    interface NPresentationTimer {
        /**
          * Begin the timer. This is called automatically by the presentation element.
         */
        "begin": () => Promise<void>;
        /**
          * To debug timed elements, set this value to true.
         */
        "debug": boolean;
        /**
          * If set, disables auto-starting the timer on render. This will be removed if in a view, when the view is activated or when the start method is called.
         */
        "deferLoad": boolean;
        /**
          * Display elapsed seconds
         */
        "display": boolean;
        /**
          * Duration before the timer stops and raises the ended event (seconds). 0 = never
         */
        "duration": number;
        /**
          * Interval in milliseconds to request between the getAnimationFrame. This affects the precision.
         */
        "interval": number;
        /**
          * Stop the timer.
         */
        "stop": () => Promise<void>;
        /**
          * Normalized timer.
         */
        "timer": ITimer;
    }
    /**
     * This element enables the UI services. These are typically
     * web element plug-ins to manage things like Modals, Drawers,
     * menus, etc. The basic provider is used to toggle dark-mode.
     * @system video
     * @extension actions
     */
    interface NVideo {
        /**
          * To debug timed elements, set this value to true.
         */
        "debug": boolean;
        /**
          * Provide the element property name that holds the duration time in seconds. Default is duration
         */
        "durationProperty": string;
        /**
          * Provider the end event name. Default is ended
         */
        "endEvent": string;
        /**
          * Provide the ready event name. Default is ready
         */
        "readyEvent": string;
        /**
          * Provide the element selector for the media object that can provide time-updates and media-end events.
         */
        "targetElement": string;
        /**
          * Provide the time-event name. Default is timeupdate
         */
        "timeEvent": string;
        /**
          * Provide the element property name that holds the current time in seconds. Default is currentTime
         */
        "timeProperty": string;
        /**
          * Normalized timer.
         */
        "timer": ITimer;
    }
    /**
     * This element displays a checkbox to control the autoplay setting,
     * used for video playback - as well as automatic navigation to the
     * next page, when a video ends. Default: enabled
     * @system video
     */
    interface NVideoSwitch {
        /**
          * The data provider to store the audio-enabled state in.
         */
        "dataProvider": string;
        /**
          * Any classes to add to the input-element directly.
         */
        "inputClass"?: string;
        /**
          * The id field to add to the input-element directly.
         */
        "inputId"?: string;
    }
    /**
     * The View element holds a segment of content visible only when
     * a URL path matches. It defines a route and its content.
     * This provides the declarative mechanism
     * for in-page content/component routing by URL.
     * @system routing
     * @extension data
     * @extension elements
     */
    interface NView {
        /**
          * Remote URL for this Route's content.
         */
        "contentSrc"?: string;
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug": boolean;
        /**
          * The path for this route should only be matched when it is exact.
         */
        "exact": boolean;
        /**
          * Return all child elements used for processing. This function is primarily meant for testing.
         */
        "getChildren": () => Promise<{ activators: HTMLNActionActivatorElement[]; views: HTMLNViewElement[]; dos: HTMLNViewPromptElement[]; }>;
        /**
          * Cross Origin Mode if the content is pulled from a remote location
         */
        "mode": 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * Force render with data & route changes.
         */
        "noCache": boolean;
        /**
          * The page description for this view.
         */
        "pageDescription": string;
        /**
          * The keywords to add to the keywords meta-tag for this view.
         */
        "pageKeywords": string;
        /**
          * The robots instruction for search indexing
         */
        "pageRobots": 'all' | 'noindex' | 'nofollow' | 'none';
        /**
          * The title for this view. This is prefixed before the app title configured in n-views
         */
        "pageTitle": string;
        /**
          * The path for this route, including the parent's routes, excluding the router's root.
         */
        "path": string;
        /**
          * Before rendering remote HTML, replace any data-tokens with their resolved values. This also commands this element to re-render it's HTML for data-changes. This can affect performance.  IMPORTANT: ONLY WORKS ON REMOTE HTML
         */
        "resolveTokens": boolean;
        /**
          * Route information
         */
        "route": Route;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset": number;
        /**
          * Remote URL for this route's HTML. HTML from this URL will be not be assigned to any slot.  You can add slot='content' to any containers within this HTML if you have a mix of HTML for this exact-route and its children.
         */
        "src"?: string;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
    }
    /**
     * Hide or show content based on the active route.
     * @system routing
     */
    interface NViewDetect {
        /**
          * Only active on the exact href match, and not on child routes
         */
        "exact": boolean;
        /**
          * The route that will toggle the active slot of this component
         */
        "route": string;
        /**
          * Optional Regex value to route match on
         */
        "routeMatch"?: Path;
        /**
          * Only active on the exact href match using every aspect of the URL including parameters.
         */
        "strict": boolean;
    }
    /**
     * The element should be used in-place of an `a` tag to navigate without
     * refreshing the page. This element supports an active-class that will
     * be applied when the route in **href** matches the route of the app.
     * This is helpful for displaying active routes in menus, bread-crumbs and tabs.
     * @system routing
     */
    interface NViewLink {
        /**
          * The class to add when the matching route is active in the browser
         */
        "activeClass": string;
        /**
          * Provide log messages for path matching.
         */
        "debug": boolean;
        /**
          * Only active on the exact href match, and not on child routes
         */
        "exact": boolean;
        /**
          * The class to add to the anchor tag.
         */
        "linkClass"?: string;
        /**
          * The destination route for this link
         */
        "path": string;
        /**
          * Only active on the exact href match using every aspect of the URL including parameters.
         */
        "strict": boolean;
        /**
          * Validates any current-route inputs before navigating. Disables navigation if any inputs are invalid.
         */
        "validate": boolean;
    }
    /**
     * @system routing
     */
    interface NViewLinkBack {
        /**
          * The class to add to the anchor tag.
         */
        "linkClass"?: string;
        /**
          * The link text
         */
        "text"?: string;
    }
    /**
     * Display a list of routes related to the current route.
     * Modes:
     * **siblings**: all routes at the same depth level (nav)
     * **parents**: all parent routes. (breadcrumbs)
     * **children**: all child routes within a hierarchy. (sub-menu)
     * @system routing
     */
    interface NViewLinkList {
        /**
          * The active-class to use with the n-view-link elements.
         */
        "activeClass"?: string;
        /**
          * Specify if the '/' route should be skipped in the list.
         */
        "excludeRoot": boolean;
        /**
          * The list-item-class to use with the li tag
         */
        "itemClass"?: string;
        /**
          * The class to add to the anchor tag.
         */
        "linkClass"?: string;
        /**
          * The list-class to use with the UL tag
         */
        "listClass"?: string;
        /**
          * The display mode for which routes to display.
         */
        "mode": 'children' | 'parents' | 'siblings';
    }
    /**
     * This element will automatically go to the next
     * view in the view.
     * @system routing
     */
    interface NViewLinkNext {
        /**
          * The class to add to the anchor tag.
         */
        "linkClass"?: string;
        /**
          * The link text
         */
        "text"?: string;
    }
    /**
     * This element should be placed at the end of the content,
     * inside the n-views element. It shows up when no views
     * above it resolve.
     * @system routing
     */
    interface NViewNotFound {
        /**
          * The title for this view. This is prefixed before the app title configured in n-views
         */
        "pageTitle": string;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset": number;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
    }
    /**
     * This element represents a specialized child-route for a parent \<n-view\> element.
     * It represents a sub-route that has required and workflow behaviors.
     * They are used to create, wizards, input workflows, or step by step instructions or
     * wherever you want guided or automatic navigation.
     * @system routing
     * @extension data
     * @extension elements
     */
    interface NViewPrompt {
        /**
          * Remote URL for HTML content. Content from this URL will be assigned the 'content' slot.
         */
        "contentSrc"?: string;
        /**
          * To debug timed elements, set this value to true.
         */
        "debug": boolean;
        /**
          * The url for this route should only be matched when it is exact.
         */
        "exact": boolean;
        /**
          * Cross Origin Mode if the content is pulled from a remote location
         */
        "mode": 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * Force render with data & route changes.
         */
        "noCache": boolean;
        /**
          * The page description for this view.
         */
        "pageDescription": string;
        /**
          * The keywords to add to the keywords meta-tag for this view.
         */
        "pageKeywords": string;
        /**
          * The robots instruction for search indexing
         */
        "pageRobots": 'all' | 'noindex' | 'nofollow' | 'none';
        /**
          * The title for this view. This is prefixed before the app title configured in n-views
         */
        "pageTitle": string;
        /**
          * The path for this prompt route, including the parent's routes, excluding the router's root.
         */
        "path": string;
        /**
          * Before rendering remote HTML, replace any data-tokens with their resolved values. This also commands this component to re-render it's HTML for data-changes. This can affect performance.  IMPORTANT: ONLY WORKS ON REMOTE HTML
         */
        "resolveTokens": boolean;
        /**
          * Route information
         */
        "route": Route;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset"?: number;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
        /**
          * The visit strategy for this do. once: persist the visit and never force it again always: do not persist, but don't don't show again in-session optional: do not force this view-do ever. It will be available by URL
         */
        "visit": 'once' | 'always' | 'optional';
        /**
          * If present, the expression must evaluate to true for this route to be sequenced by the parent view. The existence of this value overrides the visit strategy
         */
        "when"?: string;
    }
    /**
     * The root element is the base container for the view-engine and its
     * child elements. This element should contain root-level HTML that
     * is global to every view along with \<n-view\>
     * elements placed within any global-html.
     * @system routing
     * @extension actions
     * @extension elements
     * @extension provider
     */
    interface NViews {
        /**
          * Turn on debugging to get helpful messages from the app, routing, data and action systems.
         */
        "debug": boolean;
        /**
          * Enable the not-found display. To customize it, use: slot="not-found"
         */
        "notFound": boolean;
        /**
          * This is the root path that the actual page is, if it isn't '/', then the router needs to know where to begin creating paths.
         */
        "root": string;
        /**
          * Header height or offset for scroll-top on this and all views.
         */
        "scrollTopOffset"?: number;
        /**
          * Delay redirecting to the start path by this value in seconds.
         */
        "startDelay": number;
        /**
          * This is the start path a user should land on when they first land on this app.
         */
        "startPath"?: string;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
    }
}
export interface NAppCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNAppElement;
}
export interface NAppAnalyticsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNAppAnalyticsElement;
}
export interface NContentReferenceCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNContentReferenceElement;
}
export interface NDataCookieCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNDataCookieElement;
}
export interface NPresentationTimerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNPresentationTimerElement;
}
export interface NVideoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLNVideoElement;
}
declare global {
    /**
     * This element just holds data to express the actionEvent to fire. This element
     * should always be the child of an n-action-activator.
     * @system actions
     */
    interface HTMLNActionElement extends Components.NAction, HTMLStencilElement {
    }
    var HTMLNActionElement: {
        prototype: HTMLNActionElement;
        new (): HTMLNActionElement;
    };
    /**
     * This element defines how or when a group of actions are
     * activated. The actions activated must be included between
     * this elements tags.
     * @system actions
     */
    interface HTMLNActionActivatorElement extends Components.NActionActivator, HTMLStencilElement {
    }
    var HTMLNActionActivatorElement: {
        prototype: HTMLNActionActivatorElement;
        new (): HTMLNActionActivatorElement;
    };
    /**
     * This component enables app services. These are console logging,
     * theming and event-delegation. As well as a plugin system to
     * manage a UI kit to add components like Modals, Drawers,
     * menus, etc.
     * @system app
     * @extension actions
     * @extension custom
     * @extension elements
     */
    interface HTMLNAppElement extends Components.NApp, HTMLStencilElement {
    }
    var HTMLNAppElement: {
        prototype: HTMLNAppElement;
        new (): HTMLNAppElement;
    };
    /**
     * This element serves as a proxy to delegate event-based
     * functions to be consumed by various analytics snippets.
     * @system app
     * @extension actions
     */
    interface HTMLNAppAnalyticsElement extends Components.NAppAnalytics, HTMLStencilElement {
    }
    var HTMLNAppAnalyticsElement: {
        prototype: HTMLNAppAnalyticsElement;
        new (): HTMLNAppAnalyticsElement;
    };
    /**
     * This element leverages the browser's web-share
     * API to give the application a native-app feel.
     * @system app
     */
    interface HTMLNAppShareElement extends Components.NAppShare, HTMLStencilElement {
    }
    var HTMLNAppShareElement: {
        prototype: HTMLNAppShareElement;
        new (): HTMLNAppShareElement;
    };
    /**
     * This element checks for the preferred light/dark theme preference of the
     * user and sets the ui state: theme, accordingly.
     * @system app
     */
    interface HTMLNAppThemeElement extends Components.NAppTheme, HTMLStencilElement {
    }
    var HTMLNAppThemeElement: {
        prototype: HTMLNAppThemeElement;
        new (): HTMLNAppThemeElement;
    };
    /**
     * This element displays a checkbox to control the
     * dark-theme setting applied to the ui.
     * Default: user-preference
     * @system app
     */
    interface HTMLNAppThemeSwitchElement extends Components.NAppThemeSwitch, HTMLStencilElement {
    }
    var HTMLNAppThemeSwitchElement: {
        prototype: HTMLNAppThemeSwitchElement;
        new (): HTMLNAppThemeSwitchElement;
    };
    /**
     * Use this element only once per page to enable audio features.
     * It will add a CDN reference to Howler.js:
     * <https://cdn.jsdelivr.net/npm/howler@2.2.3/dist/howler.core.min.js>
     * @system audio
     * @extension actions
     * @extension provider
     */
    interface HTMLNAudioElement extends Components.NAudio, HTMLStencilElement {
    }
    var HTMLNAudioElement: {
        prototype: HTMLNAudioElement;
        new (): HTMLNAudioElement;
    };
    /**
     * This element represents an action to be fired. This
     * specialized action encapsulates required parameters
     * needed for audio-based actions, for music.
     * @system audio
     * @system actions
     */
    interface HTMLNAudioActionMusicElement extends Components.NAudioActionMusic, HTMLStencilElement {
    }
    var HTMLNAudioActionMusicElement: {
        prototype: HTMLNAudioActionMusicElement;
        new (): HTMLNAudioActionMusicElement;
    };
    /**
     * This element declares audio used within this \<n-view-prompt\> route.
     * The \<n-audio-action-sound-load\> instructs the player to load audio files
     * while defining play behaviors.
     * The audio player will pre-load or play when the route is active.
     * The player manages them according to their settings.
     * @system audio
     * @system actions
     */
    interface HTMLNAudioActionMusicLoadElement extends Components.NAudioActionMusicLoad, HTMLStencilElement {
    }
    var HTMLNAudioActionMusicLoadElement: {
        prototype: HTMLNAudioActionMusicLoadElement;
        new (): HTMLNAudioActionMusicLoadElement;
    };
    /**
     * This element represents an action to be fired. This
     * specialized action encapsulates required parameters
     * needed for audio-based actions, for sound.
     * @system audio
     * @system actions
     */
    interface HTMLNAudioActionSoundElement extends Components.NAudioActionSound, HTMLStencilElement {
    }
    var HTMLNAudioActionSoundElement: {
        prototype: HTMLNAudioActionSoundElement;
        new (): HTMLNAudioActionSoundElement;
    };
    /**
     * This element declares audio used within this \<n-view-prompt\> route.
     * The \<n-audio-action-sound-load\> instructs the player to load audio files
     * while defining play behaviors.
     * The audio player will pre-load or play when the route is active.
     * The player manages them according to their settings.
     * @system audio
     * @system actions
     */
    interface HTMLNAudioActionSoundLoadElement extends Components.NAudioActionSoundLoad, HTMLStencilElement {
    }
    var HTMLNAudioActionSoundLoadElement: {
        prototype: HTMLNAudioActionSoundLoadElement;
        new (): HTMLNAudioActionSoundLoadElement;
    };
    /**
     * This element exposes a checkbox to enable or disable global audio for background sounds and video.
     * @system audio
     */
    interface HTMLNAudioSwitchElement extends Components.NAudioSwitch, HTMLStencilElement {
    }
    var HTMLNAudioSwitchElement: {
        prototype: HTMLNAudioSwitchElement;
        new (): HTMLNAudioSwitchElement;
    };
    /**
     * This component should surround the inner-content of a remote HTML file that can be prioritized during SPA navigation.
     * @system content
     */
    interface HTMLNContentElement extends Components.NContent, HTMLStencilElement {
    }
    var HTMLNContentElement: {
        prototype: HTMLNContentElement;
        new (): HTMLNContentElement;
    };
    /**
     * This element fetches remote HTML and renders it safely and directly
     * into the page when and where you tell it too, as soon as it renders.
     * @system content
     * @extension data
     * @extension elements
     */
    interface HTMLNContentIncludeElement extends Components.NContentInclude, HTMLStencilElement {
    }
    var HTMLNContentIncludeElement: {
        prototype: HTMLNContentIncludeElement;
        new (): HTMLNContentIncludeElement;
    };
    /**
     * This element converts markdown text to HTML. It can render
     * from an inline-template or from a remote source.
     * @system content
     * @extension data
     * @extension elements
     */
    interface HTMLNContentMarkdownElement extends Components.NContentMarkdown, HTMLStencilElement {
    }
    var HTMLNContentMarkdownElement: {
        prototype: HTMLNContentMarkdownElement;
        new (): HTMLNContentMarkdownElement;
    };
    /**
     * This element makes a single reference to script and css sources. It can
     * be used by HTML fragment to ensure a reference is made, without worrying
     * that it will create duplicate references.
     * @system content
     */
    interface HTMLNContentReferenceElement extends Components.NContentReference, HTMLStencilElement {
    }
    var HTMLNContentReferenceElement: {
        prototype: HTMLNContentReferenceElement;
        new (): HTMLNContentReferenceElement;
    };
    /**
     * This tag renders a template for each item in the configured array.
     * The item template uses value expressions to insert data from any
     * data provider as well as the item in the array.
     * @system content
     * @extension data
     * @extension elements
     */
    interface HTMLNContentRepeatElement extends Components.NContentRepeat, HTMLStencilElement {
    }
    var HTMLNContentRepeatElement: {
        prototype: HTMLNContentRepeatElement;
        new (): HTMLNContentRepeatElement;
    };
    /**
     * Use this element to add a little flair to any HTML.
     * It creates an entrance animation using the configured
     * attributes to add pop to any page.
     * @system content
     */
    interface HTMLNContentRevealElement extends Components.NContentReveal, HTMLStencilElement {
    }
    var HTMLNContentRevealElement: {
        prototype: HTMLNContentRevealElement;
        new (): HTMLNContentRevealElement;
    };
    /**
     * This element conditionally renders child elements based on the
     * configured predicate applied to the when value predicate.
     * To learn more about predicates, check out the
     * expressions documentation.
     * @system content
     * @extension data
     */
    interface HTMLNContentShowElement extends Components.NContentShow, HTMLStencilElement {
    }
    var HTMLNContentShowElement: {
        prototype: HTMLNContentShowElement;
        new (): HTMLNContentShowElement;
    };
    /**
     * Render data directly into HTML using declarative expressions.
     * This element renders the expression with all data-tokens
     * replaced with the values provided by the provider.
     * @system content
     * @extension data
     * @extension elements
     */
    interface HTMLNContentTemplateElement extends Components.NContentTemplate, HTMLStencilElement {
    }
    var HTMLNContentTemplateElement: {
        prototype: HTMLNContentTemplateElement;
        new (): HTMLNContentTemplateElement;
    };
    /**
     * This element enables the Data Provider system. It hosts
     * the action-listener that registers providers.  Add this tag
     * to that page to enable token-replacement.
     * @system data
     * @extension actions
     * @extension custom
     */
    interface HTMLNDataElement extends Components.NData, HTMLStencilElement {
    }
    var HTMLNDataElement: {
        prototype: HTMLNDataElement;
        new (): HTMLNDataElement;
    };
    /**
     * This element enables the *Cookie Data Provider*,
     * after requesting consent from the user. The consent
     * message and the accept/reject button are customizable.
     * @system data
     * @extension actions
     * @extension provider
     */
    interface HTMLNDataCookieElement extends Components.NDataCookie, HTMLStencilElement {
    }
    var HTMLNDataCookieElement: {
        prototype: HTMLNDataCookieElement;
        new (): HTMLNDataCookieElement;
    };
    /**
     * This element enables the **Session Data Provider**.
     * It leverages the short-lived browser storage.
     * @system data
     * @extension actions
     * @extension provider
     */
    interface HTMLNDataSessionElement extends Components.NDataSession, HTMLStencilElement {
    }
    var HTMLNDataSessionElement: {
        prototype: HTMLNDataSessionElement;
        new (): HTMLNDataSessionElement;
    };
    /**
     * This element enables the **Storage Data Provider**, that
     * leverages the browsers 'long-term' data storage.
     * @system data
     * @extension actions
     * @extension provider
     */
    interface HTMLNDataStorageElement extends Components.NDataStorage, HTMLStencilElement {
    }
    var HTMLNDataStorageElement: {
        prototype: HTMLNDataStorageElement;
        new (): HTMLNDataStorageElement;
    };
    /**
     * This element enables element manipulation through the n-actions element.
     * Add it to the page to perform actions like 'add-css', toggle
     * attributes or to execute functions on the DOM without code.
     * @system elements
     * @extension actions
     */
    interface HTMLNElementsElement extends Components.NElements, HTMLStencilElement {
    }
    var HTMLNElementsElement: {
        prototype: HTMLNElementsElement;
        new (): HTMLNElementsElement;
    };
    /**
     * This element encapsulates a timed presentation. This element uses
     * a child n-presentation-timer or n-video element to create time-events
     * then it delegates those events to time-based action-activators.
     * If enabled, the n-attributes for time will also get processed. This
     * element also has the ability to go to the next route using the active
     * route's 'goNext' function.
     * @system presentation
     * @extension elements
     */
    interface HTMLNPresentationElement extends Components.NPresentation, HTMLStencilElement {
    }
    var HTMLNPresentationElement: {
        prototype: HTMLNPresentationElement;
        new (): HTMLNPresentationElement;
    };
    /**
     * This specialized action contains the time attribute,
     * allowing it to be activated directly within the n-presentation
     * element (no n-action-activator needed)
     * @system presentation
     * @system actions
     */
    interface HTMLNPresentationActionElement extends Components.NPresentationAction, HTMLStencilElement {
    }
    var HTMLNPresentationActionElement: {
        prototype: HTMLNPresentationActionElement;
        new (): HTMLNPresentationActionElement;
    };
    /**
     * This element creates a timer for the presentation
     * element to use in place of a video, to time actions
     * or manipulate HTML by time.
     * @system presentation
     */
    interface HTMLNPresentationTimerElement extends Components.NPresentationTimer, HTMLStencilElement {
    }
    var HTMLNPresentationTimerElement: {
        prototype: HTMLNPresentationTimerElement;
        new (): HTMLNPresentationTimerElement;
    };
    /**
     * This element enables the UI services. These are typically
     * web element plug-ins to manage things like Modals, Drawers,
     * menus, etc. The basic provider is used to toggle dark-mode.
     * @system video
     * @extension actions
     */
    interface HTMLNVideoElement extends Components.NVideo, HTMLStencilElement {
    }
    var HTMLNVideoElement: {
        prototype: HTMLNVideoElement;
        new (): HTMLNVideoElement;
    };
    /**
     * This element displays a checkbox to control the autoplay setting,
     * used for video playback - as well as automatic navigation to the
     * next page, when a video ends. Default: enabled
     * @system video
     */
    interface HTMLNVideoSwitchElement extends Components.NVideoSwitch, HTMLStencilElement {
    }
    var HTMLNVideoSwitchElement: {
        prototype: HTMLNVideoSwitchElement;
        new (): HTMLNVideoSwitchElement;
    };
    /**
     * The View element holds a segment of content visible only when
     * a URL path matches. It defines a route and its content.
     * This provides the declarative mechanism
     * for in-page content/component routing by URL.
     * @system routing
     * @extension data
     * @extension elements
     */
    interface HTMLNViewElement extends Components.NView, HTMLStencilElement {
    }
    var HTMLNViewElement: {
        prototype: HTMLNViewElement;
        new (): HTMLNViewElement;
    };
    /**
     * Hide or show content based on the active route.
     * @system routing
     */
    interface HTMLNViewDetectElement extends Components.NViewDetect, HTMLStencilElement {
    }
    var HTMLNViewDetectElement: {
        prototype: HTMLNViewDetectElement;
        new (): HTMLNViewDetectElement;
    };
    /**
     * The element should be used in-place of an `a` tag to navigate without
     * refreshing the page. This element supports an active-class that will
     * be applied when the route in **href** matches the route of the app.
     * This is helpful for displaying active routes in menus, bread-crumbs and tabs.
     * @system routing
     */
    interface HTMLNViewLinkElement extends Components.NViewLink, HTMLStencilElement {
    }
    var HTMLNViewLinkElement: {
        prototype: HTMLNViewLinkElement;
        new (): HTMLNViewLinkElement;
    };
    /**
     * @system routing
     */
    interface HTMLNViewLinkBackElement extends Components.NViewLinkBack, HTMLStencilElement {
    }
    var HTMLNViewLinkBackElement: {
        prototype: HTMLNViewLinkBackElement;
        new (): HTMLNViewLinkBackElement;
    };
    /**
     * Display a list of routes related to the current route.
     * Modes:
     * **siblings**: all routes at the same depth level (nav)
     * **parents**: all parent routes. (breadcrumbs)
     * **children**: all child routes within a hierarchy. (sub-menu)
     * @system routing
     */
    interface HTMLNViewLinkListElement extends Components.NViewLinkList, HTMLStencilElement {
    }
    var HTMLNViewLinkListElement: {
        prototype: HTMLNViewLinkListElement;
        new (): HTMLNViewLinkListElement;
    };
    /**
     * This element will automatically go to the next
     * view in the view.
     * @system routing
     */
    interface HTMLNViewLinkNextElement extends Components.NViewLinkNext, HTMLStencilElement {
    }
    var HTMLNViewLinkNextElement: {
        prototype: HTMLNViewLinkNextElement;
        new (): HTMLNViewLinkNextElement;
    };
    /**
     * This element should be placed at the end of the content,
     * inside the n-views element. It shows up when no views
     * above it resolve.
     * @system routing
     */
    interface HTMLNViewNotFoundElement extends Components.NViewNotFound, HTMLStencilElement {
    }
    var HTMLNViewNotFoundElement: {
        prototype: HTMLNViewNotFoundElement;
        new (): HTMLNViewNotFoundElement;
    };
    /**
     * This element represents a specialized child-route for a parent \<n-view\> element.
     * It represents a sub-route that has required and workflow behaviors.
     * They are used to create, wizards, input workflows, or step by step instructions or
     * wherever you want guided or automatic navigation.
     * @system routing
     * @extension data
     * @extension elements
     */
    interface HTMLNViewPromptElement extends Components.NViewPrompt, HTMLStencilElement {
    }
    var HTMLNViewPromptElement: {
        prototype: HTMLNViewPromptElement;
        new (): HTMLNViewPromptElement;
    };
    /**
     * The root element is the base container for the view-engine and its
     * child elements. This element should contain root-level HTML that
     * is global to every view along with \<n-view\>
     * elements placed within any global-html.
     * @system routing
     * @extension actions
     * @extension elements
     * @extension provider
     */
    interface HTMLNViewsElement extends Components.NViews, HTMLStencilElement {
    }
    var HTMLNViewsElement: {
        prototype: HTMLNViewsElement;
        new (): HTMLNViewsElement;
    };
    interface HTMLElementTagNameMap {
        "n-action": HTMLNActionElement;
        "n-action-activator": HTMLNActionActivatorElement;
        "n-app": HTMLNAppElement;
        "n-app-analytics": HTMLNAppAnalyticsElement;
        "n-app-share": HTMLNAppShareElement;
        "n-app-theme": HTMLNAppThemeElement;
        "n-app-theme-switch": HTMLNAppThemeSwitchElement;
        "n-audio": HTMLNAudioElement;
        "n-audio-action-music": HTMLNAudioActionMusicElement;
        "n-audio-action-music-load": HTMLNAudioActionMusicLoadElement;
        "n-audio-action-sound": HTMLNAudioActionSoundElement;
        "n-audio-action-sound-load": HTMLNAudioActionSoundLoadElement;
        "n-audio-switch": HTMLNAudioSwitchElement;
        "n-content": HTMLNContentElement;
        "n-content-include": HTMLNContentIncludeElement;
        "n-content-markdown": HTMLNContentMarkdownElement;
        "n-content-reference": HTMLNContentReferenceElement;
        "n-content-repeat": HTMLNContentRepeatElement;
        "n-content-reveal": HTMLNContentRevealElement;
        "n-content-show": HTMLNContentShowElement;
        "n-content-template": HTMLNContentTemplateElement;
        "n-data": HTMLNDataElement;
        "n-data-cookie": HTMLNDataCookieElement;
        "n-data-session": HTMLNDataSessionElement;
        "n-data-storage": HTMLNDataStorageElement;
        "n-elements": HTMLNElementsElement;
        "n-presentation": HTMLNPresentationElement;
        "n-presentation-action": HTMLNPresentationActionElement;
        "n-presentation-timer": HTMLNPresentationTimerElement;
        "n-video": HTMLNVideoElement;
        "n-video-switch": HTMLNVideoSwitchElement;
        "n-view": HTMLNViewElement;
        "n-view-detect": HTMLNViewDetectElement;
        "n-view-link": HTMLNViewLinkElement;
        "n-view-link-back": HTMLNViewLinkBackElement;
        "n-view-link-list": HTMLNViewLinkListElement;
        "n-view-link-next": HTMLNViewLinkNextElement;
        "n-view-not-found": HTMLNViewNotFoundElement;
        "n-view-prompt": HTMLNViewPromptElement;
        "n-views": HTMLNViewsElement;
    }
}
declare namespace LocalJSX {
    /**
     * This element just holds data to express the actionEvent to fire. This element
     * should always be the child of an n-action-activator.
     * @system actions
     */
    interface NAction {
        /**
          * The command to execute.
         */
        "command": string;
        /**
          * This is the topic this action-command is targeting.
         */
        "topic": string;
        /**
          * A predicate to evaluate prior to sending the action.
         */
        "when"?: string;
    }
    /**
     * This element defines how or when a group of actions are
     * activated. The actions activated must be included between
     * this elements tags.
     * @system actions
     */
    interface NActionActivator {
        /**
          * The activation strategy to use for the contained actions.
         */
        "activate"?: | 'on-render'
    | 'on-element-event'
    | 'on-enter'
    | 'at-time'
    | 'at-time-end'
    | 'on-exit';
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug"?: boolean;
        /**
          * Limit the activation to ONCE. This could be helpful if an action has side-effects if it is run multiple times.  Note: the activation state is stored in memory and does not persist across refreshes.
         */
        "once"?: boolean;
        /**
          * The element or elements to watch for events when using the OnElementEvent activation strategy. This element uses the HTML Element querySelectorAll function to find the element/s based on the query in this attribute.  If left blank, this element looks for child elements matching: 'a,button,input[type=button]'  For use with activate="on-element-event" and "at-time"
         */
        "targetElement"?: string;
        /**
          * This is the name of the event/s to listen to on the target element separated by comma.
         */
        "targetEvent"?: string;
        /**
          * The time, in seconds at which the contained actions should be submitted.  For use with activate="at-time" Only!
         */
        "time"?: number;
    }
    /**
     * This component enables app services. These are console logging,
     * theming and event-delegation. As well as a plugin system to
     * manage a UI kit to add components like Modals, Drawers,
     * menus, etc.
     * @system app
     * @extension actions
     * @extension custom
     * @extension elements
     */
    interface NApp {
        /**
          * This is the application default page description.
         */
        "appDescription"?: string;
        /**
          * This is the application default page keywords.
         */
        "appKeywords"?: string;
        /**
          * This is the application / site title. If the views have titles, this is added as a suffix.
         */
        "appTitle"?: string;
        /**
          * Turn on debugging to get helpful messages from the app, routing, data and action systems.
         */
        "debug"?: boolean;
        /**
          * These events are command-requests for action handlers to perform tasks. Any outside handlers should cancel the event.
         */
        "onNent:actions"?: (event: NAppCustomEvent<any>) => void;
        /**
          * Listen for events that occurred within the nent event system.
         */
        "onNent:events"?: (event: NAppCustomEvent<any>) => void;
    }
    /**
     * This element serves as a proxy to delegate event-based
     * functions to be consumed by various analytics snippets.
     * @system app
     * @extension actions
     */
    interface NAppAnalytics {
        /**
          * Turn on debugging to get helpful messages from the app, routing, data and action systems.
         */
        "debug"?: boolean;
        /**
          * Raised analytics events.
         */
        "onCustom-event"?: (event: NAppAnalyticsCustomEvent<any>) => void;
        /**
          * Page views.
         */
        "onPage-view"?: (event: NAppAnalyticsCustomEvent<LocationSegments>) => void;
        /**
          * View percentage views.
         */
        "onView-time"?: (event: NAppAnalyticsCustomEvent<ViewTime>) => void;
    }
    /**
     * This element leverages the browser's web-share
     * API to give the application a native-app feel.
     * @system app
     */
    interface NAppShare {
        /**
          * Headline for the share
         */
        "headline"?: string;
        /**
          * The textual body of web share
         */
        "text"?: string;
        /**
          * The URL we are sharing
         */
        "url"?: string;
    }
    /**
     * This element checks for the preferred light/dark theme preference of the
     * user and sets the ui state: theme, accordingly.
     * @system app
     */
    interface NAppTheme {
        /**
          * Change the class name that is added to the target element when the theme is determined to be dark.
         */
        "darkClass"?: string;
        /**
          * Display the user's system preference.
         */
        "display"?: boolean;
        /**
          * This element displays the current theme, unless in switch-mode, it will show the opposite.
         */
        "switch"?: boolean;
        /**
          * Change the element that is decorated with the dark-mode class
         */
        "targetElement"?: string;
    }
    /**
     * This element displays a checkbox to control the
     * dark-theme setting applied to the ui.
     * Default: user-preference
     * @system app
     */
    interface NAppThemeSwitch {
        /**
          * The class to add to the inner input.
         */
        "inputClass"?: string;
        /**
          * The inner input ID
         */
        "inputId"?: string;
    }
    /**
     * Use this element only once per page to enable audio features.
     * It will add a CDN reference to Howler.js:
     * <https://cdn.jsdelivr.net/npm/howler@2.2.3/dist/howler.core.min.js>
     * @system audio
     * @extension actions
     * @extension provider
     */
    interface NAudio {
        /**
          * A reference to the action listener for testing.
         */
        "actions"?: AudioActionListener;
        /**
          * Experimental support for providing audio-data in the data-provider system.
         */
        "dataProvider"?: boolean;
        /**
          * Use debug for verbose logging. Useful for figuring things out.
         */
        "debug"?: boolean;
        /**
          * The display mode enabled shows player state and stats. No track information or duration is to be displayed.
         */
        "display"?: boolean;
        /**
          * The Howler.js Script Reference
         */
        "howlerVersion"?: string;
    }
    /**
     * This element represents an action to be fired. This
     * specialized action encapsulates required parameters
     * needed for audio-based actions, for music.
     * @system audio
     * @system actions
     */
    interface NAudioActionMusic {
        /**
          * The command to execute.
         */
        "command": | 'start'
    | 'pause'
    | 'resume'
    | 'mute'
    | 'volume'
    | 'seek';
        /**
          * Readonly topic
         */
        "topic"?: "audio";
        /**
          * The track to target.
         */
        "trackId"?: string;
        /**
          * The value payload for the command.
         */
        "value"?: string | boolean | number;
        /**
          * A predicate to evaluate prior to sending the action.
         */
        "when"?: string;
    }
    /**
     * This element declares audio used within this \<n-view-prompt\> route.
     * The \<n-audio-action-sound-load\> instructs the player to load audio files
     * while defining play behaviors.
     * The audio player will pre-load or play when the route is active.
     * The player manages them according to their settings.
     * @system audio
     * @system actions
     */
    interface NAudioActionMusicLoad {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * The discard strategy the player should use for this file.
         */
        "discard"?: 'route' | 'next' | 'none';
        /**
          * Set this to true to have the audio file loop.
         */
        "loop"?: boolean;
        /**
          * This is the loading strategy that determines what it should do after the file is retrieved.
         */
        "mode"?: 'queue' | 'play' | 'load';
        /**
          * The path to the audio-file.
          * @required
         */
        "src": string;
        /**
          * The identifier for this music track
         */
        "trackId": string;
    }
    /**
     * This element represents an action to be fired. This
     * specialized action encapsulates required parameters
     * needed for audio-based actions, for sound.
     * @system audio
     * @system actions
     */
    interface NAudioActionSound {
        /**
          * The command to execute.
         */
        "command": | 'start'
    | 'pause'
    | 'resume'
    | 'mute'
    | 'volume'
    | 'seek';
        /**
          * Readonly topic
         */
        "topic"?: "audio";
        /**
          * The track to target.
         */
        "trackId"?: string;
        /**
          * The value payload for the command.
         */
        "value"?: string | boolean | number;
        /**
          * A predicate to evaluate prior to sending the action.
         */
        "when"?: string;
    }
    /**
     * This element declares audio used within this \<n-view-prompt\> route.
     * The \<n-audio-action-sound-load\> instructs the player to load audio files
     * while defining play behaviors.
     * The audio player will pre-load or play when the route is active.
     * The player manages them according to their settings.
     * @system audio
     * @system actions
     */
    interface NAudioActionSoundLoad {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * The discard strategy the player should use for this file.
         */
        "discard"?: 'route' | 'next' | 'none';
        /**
          * This is the loading strategy that determines what it should do after the file is retrieved.
         */
        "mode"?: 'queue' | 'play' | 'load';
        /**
          * The path to the audio-file.
         */
        "src": string;
        /**
          * The identifier for this music track
         */
        "trackId": string;
    }
    /**
     * This element exposes a checkbox to enable or disable global audio for background sounds and video.
     * @system audio
     */
    interface NAudioSwitch {
        /**
          * The data provider to store the audio state in.
         */
        "dataProvider"?: string;
        /**
          * Any classes to add to the input-element directly.
         */
        "inputClass"?: string;
        /**
          * The id field to add to the input-element directly.
         */
        "inputId"?: string;
        /**
          * Which state property this switch controls.
         */
        "setting"?: 'muted' | 'enabled';
    }
    /**
     * This component should surround the inner-content of a remote HTML file that can be prioritized during SPA navigation.
     * @system content
     */
    interface NContent {
    }
    /**
     * This element fetches remote HTML and renders it safely and directly
     * into the page when and where you tell it too, as soon as it renders.
     * @system content
     * @extension data
     * @extension elements
     */
    interface NContentInclude {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * The JSONata expression to select the HTML from a json response. see <https://try.jsonata.org> for more info.
         */
        "json"?: string;
        /**
          * Cross Origin Mode
         */
        "mode"?: 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * Before rendering HTML, replace any data-tokens with their resolved values. This also commands this element to re-render it's HTML for data-changes. This can affect performance.
         */
        "resolveTokens"?: boolean;
        /**
          * Remote Template URL
         */
        "src": string;
        /**
          * A data-token predicate to advise this element when to render (useful if used in a dynamic route or if tokens are used in the 'src' attribute)
         */
        "when"?: string;
    }
    /**
     * This element converts markdown text to HTML. It can render
     * from an inline-template or from a remote source.
     * @system content
     * @extension data
     * @extension elements
     */
    interface NContentMarkdown {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * The JSONata expression to select the markdown from a json response. see <https://try.jsonata.org> for more info.
         */
        "json"?: string;
        /**
          * Cross Origin Mode
         */
        "mode"?: 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * Force render with data & route changes.
         */
        "noCache"?: boolean;
        /**
          * Before rendering HTML, replace any data-tokens with their resolved values. This also commands this element to re-render it's HTML for data-changes. This can affect performance.
         */
        "resolveTokens"?: boolean;
        /**
          * Remote Template URL
         */
        "src"?: string;
        /**
          * A data-token predicate to advise this element when to render (useful if used in a dynamic route or if tokens are used in the 'src' attribute)
         */
        "when"?: string;
    }
    /**
     * This element makes a single reference to script and css sources. It can
     * be used by HTML fragment to ensure a reference is made, without worrying
     * that it will create duplicate references.
     * @system content
     */
    interface NContentReference {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * When inline the link/script tags are rendered in-place rather than added to the head.
         */
        "inline"?: boolean;
        /**
          * Import the script file as a module.
         */
        "module"?: boolean;
        /**
          * Declare the script only for use when modules aren't supported
         */
        "noModule"?: boolean;
        /**
          * This event is fired when the script and style elements are loaded or timed out. The value for each style and script will be true or false, for loaded or timedout, respectively.
         */
        "onReferenced"?: (event: NContentReferenceCustomEvent<ReferenceCompleteResults>) => void;
        /**
          * The script file to reference.
         */
        "scriptSrc"?: string;
        /**
          * The css file to reference
         */
        "styleSrc"?: string;
        /**
          * Timeout (in milliseconds) to wait for the references to load.
         */
        "timeout"?: number;
    }
    /**
     * This tag renders a template for each item in the configured array.
     * The item template uses value expressions to insert data from any
     * data provider as well as the item in the array.
     * @system content
     * @extension data
     * @extension elements
     */
    interface NContentRepeat {
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug"?: boolean;
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * The JSONata query to filter the json items see <https://try.jsonata.org> for more info.
         */
        "filter"?: string;
        /**
          * The array-string or data expression to obtain a collection for rendering the template. {{session:cart.items}}
         */
        "items"?: string;
        /**
          * The URL to remote JSON collection to use for the items.
          * @example /data.json
         */
        "itemsSrc"?: string;
        /**
          * Force render with data & route changes.
         */
        "noCache"?: boolean;
        /**
          * A data-token predicate to advise this element when to render (useful if used in a dynamic route or if tokens are used in the 'src' attribute)
         */
        "when"?: string;
    }
    /**
     * Use this element to add a little flair to any HTML.
     * It creates an entrance animation using the configured
     * attributes to add pop to any page.
     * @system content
     */
    interface NContentReveal {
        /**
          * How far the element moves in the animation (% of element width/height)
         */
        "animationDistance"?: string;
        /**
          * How long to delay the animation (ms)
         */
        "delay"?: number;
        /**
          * Direction the element moves when animating in
         */
        "direction"?: 'up' | 'down' | 'right' | 'left';
        /**
          * How long the animation runs (ms)
         */
        "duration"?: number;
        /**
          * How much of the element must be visible before it animates (% of element height)
         */
        "triggerDistance"?: string;
    }
    /**
     * This element conditionally renders child elements based on the
     * configured predicate applied to the when value predicate.
     * To learn more about predicates, check out the
     * expressions documentation.
     * @system content
     * @extension data
     */
    interface NContentShow {
        /**
          * The data expression to obtain a predicate for conditionally rendering the inner-contents of this element.
         */
        "when": string;
    }
    /**
     * Render data directly into HTML using declarative expressions.
     * This element renders the expression with all data-tokens
     * replaced with the values provided by the provider.
     * @system content
     * @extension data
     * @extension elements
     */
    interface NContentTemplate {
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug"?: boolean;
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * The JSONata query to filter the json items see <https://try.jsonata.org> for more info.
         */
        "filter"?: string;
        /**
          * When declared, the child script tag is required and should be the query text for the request. Also, this forces the HTTP method to 'POST'.
         */
        "graphql"?: boolean;
        /**
          * Cross Origin Mode
         */
        "mode"?: 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * Force render with data & route changes.
         */
        "noCache"?: boolean;
        /**
          * The URL to remote JSON data to bind to this template
          * @example /data.json
         */
        "src"?: string;
        /**
          * The data expression to obtain a value for rendering as inner-text for this element.
          * @default null
         */
        "text"?: string;
        /**
          * A data-token predicate to advise this element when to render (useful if used in a dynamic route or if tokens are used in the 'src' attribute)
         */
        "when"?: string;
    }
    /**
     * This element enables the Data Provider system. It hosts
     * the action-listener that registers providers.  Add this tag
     * to that page to enable token-replacement.
     * @system data
     * @extension actions
     * @extension custom
     */
    interface NData {
        /**
          * Turn on debugging to get helpful messages from the data action systems.
         */
        "debug"?: boolean;
        /**
          * The wait-time, in seconds to wait for un-registered data providers found in an expression. This is to accommodate a possible lag between evaluation before the first predicate and the registration process.
         */
        "providerTimeout"?: number;
    }
    /**
     * This element enables the *Cookie Data Provider*,
     * after requesting consent from the user. The consent
     * message and the accept/reject button are customizable.
     * @system data
     * @extension actions
     * @extension provider
     */
    interface NDataCookie {
        /**
          * Provider name to use in nent expressions.
         */
        "name"?: string;
        /**
          * This event is raised when the user consents to cookies.
         */
        "onDidConsent"?: (event: NDataCookieCustomEvent<CookieConsent>) => void;
        /**
          * When skipConsent is true, the accept-cookies banner will not be displayed before accessing cookie-data.
         */
        "skipConsent"?: boolean;
    }
    /**
     * This element enables the **Session Data Provider**.
     * It leverages the short-lived browser storage.
     * @system data
     * @extension actions
     * @extension provider
     */
    interface NDataSession {
        /**
          * The key prefix to use in storage
         */
        "keyPrefix"?: string;
        /**
          * Provider name to use in nent expressions.
         */
        "name"?: string;
    }
    /**
     * This element enables the **Storage Data Provider**, that
     * leverages the browsers 'long-term' data storage.
     * @system data
     * @extension actions
     * @extension provider
     */
    interface NDataStorage {
        /**
          * The key prefix to use in storage
         */
        "keyPrefix"?: string;
        /**
          * Provider name to use in nent expressions.
         */
        "name"?: string;
    }
    /**
     * This element enables element manipulation through the n-actions element.
     * Add it to the page to perform actions like 'add-css', toggle
     * attributes or to execute functions on the DOM without code.
     * @system elements
     * @extension actions
     */
    interface NElements {
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug"?: boolean;
    }
    /**
     * This element encapsulates a timed presentation. This element uses
     * a child n-presentation-timer or n-video element to create time-events
     * then it delegates those events to time-based action-activators.
     * If enabled, the n-attributes for time will also get processed. This
     * element also has the ability to go to the next route using the active
     * route's 'goNext' function.
     * @system presentation
     * @extension elements
     */
    interface NPresentation {
        /**
          * Send analytics view-time percentages for this presentation using the event name
         */
        "analyticsEvent"?: string;
        /**
          * To debug timed elements, set this value to true.
         */
        "debug"?: boolean;
        /**
          * Go to the next view after the timer ends
         */
        "nextAfter"?: boolean | string;
        /**
          * The element selector for the timer-element to bind for interval events. If left blank, it looks first an n-timer, then for the first n-video.  If none are found, it creates one manually and starts it immediately
         */
        "timerElement"?: string | null;
    }
    /**
     * This specialized action contains the time attribute,
     * allowing it to be activated directly within the n-presentation
     * element (no n-action-activator needed)
     * @system presentation
     * @system actions
     */
    interface NPresentationAction {
        /**
          * The command to execute.
         */
        "command": string;
        /**
          * The time this should execute
         */
        "time"?: number | 'end';
        /**
          * This is the topic this action-command is targeting.
         */
        "topic": string;
        /**
          * A predicate to evaluate prior to sending the action.
         */
        "when"?: string;
    }
    /**
     * This element creates a timer for the presentation
     * element to use in place of a video, to time actions
     * or manipulate HTML by time.
     * @system presentation
     */
    interface NPresentationTimer {
        /**
          * To debug timed elements, set this value to true.
         */
        "debug"?: boolean;
        /**
          * If set, disables auto-starting the timer on render. This will be removed if in a view, when the view is activated or when the start method is called.
         */
        "deferLoad"?: boolean;
        /**
          * Display elapsed seconds
         */
        "display"?: boolean;
        /**
          * Duration before the timer stops and raises the ended event (seconds). 0 = never
         */
        "duration"?: number;
        /**
          * Interval in milliseconds to request between the getAnimationFrame. This affects the precision.
         */
        "interval"?: number;
        /**
          * Ready event letting the presentation layer know it can begin.
         */
        "onReady"?: (event: NPresentationTimerCustomEvent<any>) => void;
        /**
          * Normalized timer.
         */
        "timer": ITimer;
    }
    /**
     * This element enables the UI services. These are typically
     * web element plug-ins to manage things like Modals, Drawers,
     * menus, etc. The basic provider is used to toggle dark-mode.
     * @system video
     * @extension actions
     */
    interface NVideo {
        /**
          * To debug timed elements, set this value to true.
         */
        "debug"?: boolean;
        /**
          * Provide the element property name that holds the duration time in seconds. Default is duration
         */
        "durationProperty"?: string;
        /**
          * Provider the end event name. Default is ended
         */
        "endEvent"?: string;
        /**
          * Ready event letting the presentation layer know it can begin.
         */
        "onReady"?: (event: NVideoCustomEvent<any>) => void;
        /**
          * Provide the ready event name. Default is ready
         */
        "readyEvent"?: string;
        /**
          * Provide the element selector for the media object that can provide time-updates and media-end events.
         */
        "targetElement"?: string;
        /**
          * Provide the time-event name. Default is timeupdate
         */
        "timeEvent"?: string;
        /**
          * Provide the element property name that holds the current time in seconds. Default is currentTime
         */
        "timeProperty"?: string;
        /**
          * Normalized timer.
         */
        "timer": ITimer;
    }
    /**
     * This element displays a checkbox to control the autoplay setting,
     * used for video playback - as well as automatic navigation to the
     * next page, when a video ends. Default: enabled
     * @system video
     */
    interface NVideoSwitch {
        /**
          * The data provider to store the audio-enabled state in.
         */
        "dataProvider"?: string;
        /**
          * Any classes to add to the input-element directly.
         */
        "inputClass"?: string;
        /**
          * The id field to add to the input-element directly.
         */
        "inputId"?: string;
    }
    /**
     * The View element holds a segment of content visible only when
     * a URL path matches. It defines a route and its content.
     * This provides the declarative mechanism
     * for in-page content/component routing by URL.
     * @system routing
     * @extension data
     * @extension elements
     */
    interface NView {
        /**
          * Remote URL for this Route's content.
         */
        "contentSrc"?: string;
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug"?: boolean;
        /**
          * The path for this route should only be matched when it is exact.
         */
        "exact"?: boolean;
        /**
          * Cross Origin Mode if the content is pulled from a remote location
         */
        "mode"?: 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * Force render with data & route changes.
         */
        "noCache"?: boolean;
        /**
          * The page description for this view.
         */
        "pageDescription"?: string;
        /**
          * The keywords to add to the keywords meta-tag for this view.
         */
        "pageKeywords"?: string;
        /**
          * The robots instruction for search indexing
         */
        "pageRobots"?: 'all' | 'noindex' | 'nofollow' | 'none';
        /**
          * The title for this view. This is prefixed before the app title configured in n-views
         */
        "pageTitle"?: string;
        /**
          * The path for this route, including the parent's routes, excluding the router's root.
         */
        "path": string;
        /**
          * Before rendering remote HTML, replace any data-tokens with their resolved values. This also commands this element to re-render it's HTML for data-changes. This can affect performance.  IMPORTANT: ONLY WORKS ON REMOTE HTML
         */
        "resolveTokens"?: boolean;
        /**
          * Route information
         */
        "route": Route;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset"?: number;
        /**
          * Remote URL for this route's HTML. HTML from this URL will be not be assigned to any slot.  You can add slot='content' to any containers within this HTML if you have a mix of HTML for this exact-route and its children.
         */
        "src"?: string;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
    }
    /**
     * Hide or show content based on the active route.
     * @system routing
     */
    interface NViewDetect {
        /**
          * Only active on the exact href match, and not on child routes
         */
        "exact"?: boolean;
        /**
          * The route that will toggle the active slot of this component
         */
        "route": string;
        /**
          * Optional Regex value to route match on
         */
        "routeMatch"?: Path;
        /**
          * Only active on the exact href match using every aspect of the URL including parameters.
         */
        "strict"?: boolean;
    }
    /**
     * The element should be used in-place of an `a` tag to navigate without
     * refreshing the page. This element supports an active-class that will
     * be applied when the route in **href** matches the route of the app.
     * This is helpful for displaying active routes in menus, bread-crumbs and tabs.
     * @system routing
     */
    interface NViewLink {
        /**
          * The class to add when the matching route is active in the browser
         */
        "activeClass"?: string;
        /**
          * Provide log messages for path matching.
         */
        "debug"?: boolean;
        /**
          * Only active on the exact href match, and not on child routes
         */
        "exact"?: boolean;
        /**
          * The class to add to the anchor tag.
         */
        "linkClass"?: string;
        /**
          * The destination route for this link
         */
        "path": string;
        /**
          * Only active on the exact href match using every aspect of the URL including parameters.
         */
        "strict"?: boolean;
        /**
          * Validates any current-route inputs before navigating. Disables navigation if any inputs are invalid.
         */
        "validate"?: boolean;
    }
    /**
     * @system routing
     */
    interface NViewLinkBack {
        /**
          * The class to add to the anchor tag.
         */
        "linkClass"?: string;
        /**
          * The link text
         */
        "text"?: string;
    }
    /**
     * Display a list of routes related to the current route.
     * Modes:
     * **siblings**: all routes at the same depth level (nav)
     * **parents**: all parent routes. (breadcrumbs)
     * **children**: all child routes within a hierarchy. (sub-menu)
     * @system routing
     */
    interface NViewLinkList {
        /**
          * The active-class to use with the n-view-link elements.
         */
        "activeClass"?: string;
        /**
          * Specify if the '/' route should be skipped in the list.
         */
        "excludeRoot"?: boolean;
        /**
          * The list-item-class to use with the li tag
         */
        "itemClass"?: string;
        /**
          * The class to add to the anchor tag.
         */
        "linkClass"?: string;
        /**
          * The list-class to use with the UL tag
         */
        "listClass"?: string;
        /**
          * The display mode for which routes to display.
         */
        "mode"?: 'children' | 'parents' | 'siblings';
    }
    /**
     * This element will automatically go to the next
     * view in the view.
     * @system routing
     */
    interface NViewLinkNext {
        /**
          * The class to add to the anchor tag.
         */
        "linkClass"?: string;
        /**
          * The link text
         */
        "text"?: string;
    }
    /**
     * This element should be placed at the end of the content,
     * inside the n-views element. It shows up when no views
     * above it resolve.
     * @system routing
     */
    interface NViewNotFound {
        /**
          * The title for this view. This is prefixed before the app title configured in n-views
         */
        "pageTitle"?: string;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset"?: number;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
    }
    /**
     * This element represents a specialized child-route for a parent \<n-view\> element.
     * It represents a sub-route that has required and workflow behaviors.
     * They are used to create, wizards, input workflows, or step by step instructions or
     * wherever you want guided or automatic navigation.
     * @system routing
     * @extension data
     * @extension elements
     */
    interface NViewPrompt {
        /**
          * Remote URL for HTML content. Content from this URL will be assigned the 'content' slot.
         */
        "contentSrc"?: string;
        /**
          * To debug timed elements, set this value to true.
         */
        "debug"?: boolean;
        /**
          * The url for this route should only be matched when it is exact.
         */
        "exact"?: boolean;
        /**
          * Cross Origin Mode if the content is pulled from a remote location
         */
        "mode"?: 'cors' | 'navigate' | 'no-cors' | 'same-origin';
        /**
          * Force render with data & route changes.
         */
        "noCache"?: boolean;
        /**
          * The page description for this view.
         */
        "pageDescription"?: string;
        /**
          * The keywords to add to the keywords meta-tag for this view.
         */
        "pageKeywords"?: string;
        /**
          * The robots instruction for search indexing
         */
        "pageRobots"?: 'all' | 'noindex' | 'nofollow' | 'none';
        /**
          * The title for this view. This is prefixed before the app title configured in n-views
         */
        "pageTitle"?: string;
        /**
          * The path for this prompt route, including the parent's routes, excluding the router's root.
         */
        "path": string;
        /**
          * Before rendering remote HTML, replace any data-tokens with their resolved values. This also commands this component to re-render it's HTML for data-changes. This can affect performance.  IMPORTANT: ONLY WORKS ON REMOTE HTML
         */
        "resolveTokens"?: boolean;
        /**
          * Route information
         */
        "route": Route;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset"?: number;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
        /**
          * The visit strategy for this do. once: persist the visit and never force it again always: do not persist, but don't don't show again in-session optional: do not force this view-do ever. It will be available by URL
         */
        "visit"?: 'once' | 'always' | 'optional';
        /**
          * If present, the expression must evaluate to true for this route to be sequenced by the parent view. The existence of this value overrides the visit strategy
         */
        "when"?: string;
    }
    /**
     * The root element is the base container for the view-engine and its
     * child elements. This element should contain root-level HTML that
     * is global to every view along with \<n-view\>
     * elements placed within any global-html.
     * @system routing
     * @extension actions
     * @extension elements
     * @extension provider
     */
    interface NViews {
        /**
          * Turn on debugging to get helpful messages from the app, routing, data and action systems.
         */
        "debug"?: boolean;
        /**
          * Enable the not-found display. To customize it, use: slot="not-found"
         */
        "notFound"?: boolean;
        /**
          * This is the root path that the actual page is, if it isn't '/', then the router needs to know where to begin creating paths.
         */
        "root"?: string;
        /**
          * Header height or offset for scroll-top on this and all views.
         */
        "scrollTopOffset"?: number;
        /**
          * Delay redirecting to the start path by this value in seconds.
         */
        "startDelay"?: number;
        /**
          * This is the start path a user should land on when they first land on this app.
         */
        "startPath"?: string;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
    }
    interface IntrinsicElements {
        "n-action": NAction;
        "n-action-activator": NActionActivator;
        "n-app": NApp;
        "n-app-analytics": NAppAnalytics;
        "n-app-share": NAppShare;
        "n-app-theme": NAppTheme;
        "n-app-theme-switch": NAppThemeSwitch;
        "n-audio": NAudio;
        "n-audio-action-music": NAudioActionMusic;
        "n-audio-action-music-load": NAudioActionMusicLoad;
        "n-audio-action-sound": NAudioActionSound;
        "n-audio-action-sound-load": NAudioActionSoundLoad;
        "n-audio-switch": NAudioSwitch;
        "n-content": NContent;
        "n-content-include": NContentInclude;
        "n-content-markdown": NContentMarkdown;
        "n-content-reference": NContentReference;
        "n-content-repeat": NContentRepeat;
        "n-content-reveal": NContentReveal;
        "n-content-show": NContentShow;
        "n-content-template": NContentTemplate;
        "n-data": NData;
        "n-data-cookie": NDataCookie;
        "n-data-session": NDataSession;
        "n-data-storage": NDataStorage;
        "n-elements": NElements;
        "n-presentation": NPresentation;
        "n-presentation-action": NPresentationAction;
        "n-presentation-timer": NPresentationTimer;
        "n-video": NVideo;
        "n-video-switch": NVideoSwitch;
        "n-view": NView;
        "n-view-detect": NViewDetect;
        "n-view-link": NViewLink;
        "n-view-link-back": NViewLinkBack;
        "n-view-link-list": NViewLinkList;
        "n-view-link-next": NViewLinkNext;
        "n-view-not-found": NViewNotFound;
        "n-view-prompt": NViewPrompt;
        "n-views": NViews;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * This element just holds data to express the actionEvent to fire. This element
             * should always be the child of an n-action-activator.
             * @system actions
             */
            "n-action": LocalJSX.NAction & JSXBase.HTMLAttributes<HTMLNActionElement>;
            /**
             * This element defines how or when a group of actions are
             * activated. The actions activated must be included between
             * this elements tags.
             * @system actions
             */
            "n-action-activator": LocalJSX.NActionActivator & JSXBase.HTMLAttributes<HTMLNActionActivatorElement>;
            /**
             * This component enables app services. These are console logging,
             * theming and event-delegation. As well as a plugin system to
             * manage a UI kit to add components like Modals, Drawers,
             * menus, etc.
             * @system app
             * @extension actions
             * @extension custom
             * @extension elements
             */
            "n-app": LocalJSX.NApp & JSXBase.HTMLAttributes<HTMLNAppElement>;
            /**
             * This element serves as a proxy to delegate event-based
             * functions to be consumed by various analytics snippets.
             * @system app
             * @extension actions
             */
            "n-app-analytics": LocalJSX.NAppAnalytics & JSXBase.HTMLAttributes<HTMLNAppAnalyticsElement>;
            /**
             * This element leverages the browser's web-share
             * API to give the application a native-app feel.
             * @system app
             */
            "n-app-share": LocalJSX.NAppShare & JSXBase.HTMLAttributes<HTMLNAppShareElement>;
            /**
             * This element checks for the preferred light/dark theme preference of the
             * user and sets the ui state: theme, accordingly.
             * @system app
             */
            "n-app-theme": LocalJSX.NAppTheme & JSXBase.HTMLAttributes<HTMLNAppThemeElement>;
            /**
             * This element displays a checkbox to control the
             * dark-theme setting applied to the ui.
             * Default: user-preference
             * @system app
             */
            "n-app-theme-switch": LocalJSX.NAppThemeSwitch & JSXBase.HTMLAttributes<HTMLNAppThemeSwitchElement>;
            /**
             * Use this element only once per page to enable audio features.
             * It will add a CDN reference to Howler.js:
             * <https://cdn.jsdelivr.net/npm/howler@2.2.3/dist/howler.core.min.js>
             * @system audio
             * @extension actions
             * @extension provider
             */
            "n-audio": LocalJSX.NAudio & JSXBase.HTMLAttributes<HTMLNAudioElement>;
            /**
             * This element represents an action to be fired. This
             * specialized action encapsulates required parameters
             * needed for audio-based actions, for music.
             * @system audio
             * @system actions
             */
            "n-audio-action-music": LocalJSX.NAudioActionMusic & JSXBase.HTMLAttributes<HTMLNAudioActionMusicElement>;
            /**
             * This element declares audio used within this \<n-view-prompt\> route.
             * The \<n-audio-action-sound-load\> instructs the player to load audio files
             * while defining play behaviors.
             * The audio player will pre-load or play when the route is active.
             * The player manages them according to their settings.
             * @system audio
             * @system actions
             */
            "n-audio-action-music-load": LocalJSX.NAudioActionMusicLoad & JSXBase.HTMLAttributes<HTMLNAudioActionMusicLoadElement>;
            /**
             * This element represents an action to be fired. This
             * specialized action encapsulates required parameters
             * needed for audio-based actions, for sound.
             * @system audio
             * @system actions
             */
            "n-audio-action-sound": LocalJSX.NAudioActionSound & JSXBase.HTMLAttributes<HTMLNAudioActionSoundElement>;
            /**
             * This element declares audio used within this \<n-view-prompt\> route.
             * The \<n-audio-action-sound-load\> instructs the player to load audio files
             * while defining play behaviors.
             * The audio player will pre-load or play when the route is active.
             * The player manages them according to their settings.
             * @system audio
             * @system actions
             */
            "n-audio-action-sound-load": LocalJSX.NAudioActionSoundLoad & JSXBase.HTMLAttributes<HTMLNAudioActionSoundLoadElement>;
            /**
             * This element exposes a checkbox to enable or disable global audio for background sounds and video.
             * @system audio
             */
            "n-audio-switch": LocalJSX.NAudioSwitch & JSXBase.HTMLAttributes<HTMLNAudioSwitchElement>;
            /**
             * This component should surround the inner-content of a remote HTML file that can be prioritized during SPA navigation.
             * @system content
             */
            "n-content": LocalJSX.NContent & JSXBase.HTMLAttributes<HTMLNContentElement>;
            /**
             * This element fetches remote HTML and renders it safely and directly
             * into the page when and where you tell it too, as soon as it renders.
             * @system content
             * @extension data
             * @extension elements
             */
            "n-content-include": LocalJSX.NContentInclude & JSXBase.HTMLAttributes<HTMLNContentIncludeElement>;
            /**
             * This element converts markdown text to HTML. It can render
             * from an inline-template or from a remote source.
             * @system content
             * @extension data
             * @extension elements
             */
            "n-content-markdown": LocalJSX.NContentMarkdown & JSXBase.HTMLAttributes<HTMLNContentMarkdownElement>;
            /**
             * This element makes a single reference to script and css sources. It can
             * be used by HTML fragment to ensure a reference is made, without worrying
             * that it will create duplicate references.
             * @system content
             */
            "n-content-reference": LocalJSX.NContentReference & JSXBase.HTMLAttributes<HTMLNContentReferenceElement>;
            /**
             * This tag renders a template for each item in the configured array.
             * The item template uses value expressions to insert data from any
             * data provider as well as the item in the array.
             * @system content
             * @extension data
             * @extension elements
             */
            "n-content-repeat": LocalJSX.NContentRepeat & JSXBase.HTMLAttributes<HTMLNContentRepeatElement>;
            /**
             * Use this element to add a little flair to any HTML.
             * It creates an entrance animation using the configured
             * attributes to add pop to any page.
             * @system content
             */
            "n-content-reveal": LocalJSX.NContentReveal & JSXBase.HTMLAttributes<HTMLNContentRevealElement>;
            /**
             * This element conditionally renders child elements based on the
             * configured predicate applied to the when value predicate.
             * To learn more about predicates, check out the
             * expressions documentation.
             * @system content
             * @extension data
             */
            "n-content-show": LocalJSX.NContentShow & JSXBase.HTMLAttributes<HTMLNContentShowElement>;
            /**
             * Render data directly into HTML using declarative expressions.
             * This element renders the expression with all data-tokens
             * replaced with the values provided by the provider.
             * @system content
             * @extension data
             * @extension elements
             */
            "n-content-template": LocalJSX.NContentTemplate & JSXBase.HTMLAttributes<HTMLNContentTemplateElement>;
            /**
             * This element enables the Data Provider system. It hosts
             * the action-listener that registers providers.  Add this tag
             * to that page to enable token-replacement.
             * @system data
             * @extension actions
             * @extension custom
             */
            "n-data": LocalJSX.NData & JSXBase.HTMLAttributes<HTMLNDataElement>;
            /**
             * This element enables the *Cookie Data Provider*,
             * after requesting consent from the user. The consent
             * message and the accept/reject button are customizable.
             * @system data
             * @extension actions
             * @extension provider
             */
            "n-data-cookie": LocalJSX.NDataCookie & JSXBase.HTMLAttributes<HTMLNDataCookieElement>;
            /**
             * This element enables the **Session Data Provider**.
             * It leverages the short-lived browser storage.
             * @system data
             * @extension actions
             * @extension provider
             */
            "n-data-session": LocalJSX.NDataSession & JSXBase.HTMLAttributes<HTMLNDataSessionElement>;
            /**
             * This element enables the **Storage Data Provider**, that
             * leverages the browsers 'long-term' data storage.
             * @system data
             * @extension actions
             * @extension provider
             */
            "n-data-storage": LocalJSX.NDataStorage & JSXBase.HTMLAttributes<HTMLNDataStorageElement>;
            /**
             * This element enables element manipulation through the n-actions element.
             * Add it to the page to perform actions like 'add-css', toggle
             * attributes or to execute functions on the DOM without code.
             * @system elements
             * @extension actions
             */
            "n-elements": LocalJSX.NElements & JSXBase.HTMLAttributes<HTMLNElementsElement>;
            /**
             * This element encapsulates a timed presentation. This element uses
             * a child n-presentation-timer or n-video element to create time-events
             * then it delegates those events to time-based action-activators.
             * If enabled, the n-attributes for time will also get processed. This
             * element also has the ability to go to the next route using the active
             * route's 'goNext' function.
             * @system presentation
             * @extension elements
             */
            "n-presentation": LocalJSX.NPresentation & JSXBase.HTMLAttributes<HTMLNPresentationElement>;
            /**
             * This specialized action contains the time attribute,
             * allowing it to be activated directly within the n-presentation
             * element (no n-action-activator needed)
             * @system presentation
             * @system actions
             */
            "n-presentation-action": LocalJSX.NPresentationAction & JSXBase.HTMLAttributes<HTMLNPresentationActionElement>;
            /**
             * This element creates a timer for the presentation
             * element to use in place of a video, to time actions
             * or manipulate HTML by time.
             * @system presentation
             */
            "n-presentation-timer": LocalJSX.NPresentationTimer & JSXBase.HTMLAttributes<HTMLNPresentationTimerElement>;
            /**
             * This element enables the UI services. These are typically
             * web element plug-ins to manage things like Modals, Drawers,
             * menus, etc. The basic provider is used to toggle dark-mode.
             * @system video
             * @extension actions
             */
            "n-video": LocalJSX.NVideo & JSXBase.HTMLAttributes<HTMLNVideoElement>;
            /**
             * This element displays a checkbox to control the autoplay setting,
             * used for video playback - as well as automatic navigation to the
             * next page, when a video ends. Default: enabled
             * @system video
             */
            "n-video-switch": LocalJSX.NVideoSwitch & JSXBase.HTMLAttributes<HTMLNVideoSwitchElement>;
            /**
             * The View element holds a segment of content visible only when
             * a URL path matches. It defines a route and its content.
             * This provides the declarative mechanism
             * for in-page content/component routing by URL.
             * @system routing
             * @extension data
             * @extension elements
             */
            "n-view": LocalJSX.NView & JSXBase.HTMLAttributes<HTMLNViewElement>;
            /**
             * Hide or show content based on the active route.
             * @system routing
             */
            "n-view-detect": LocalJSX.NViewDetect & JSXBase.HTMLAttributes<HTMLNViewDetectElement>;
            /**
             * The element should be used in-place of an `a` tag to navigate without
             * refreshing the page. This element supports an active-class that will
             * be applied when the route in **href** matches the route of the app.
             * This is helpful for displaying active routes in menus, bread-crumbs and tabs.
             * @system routing
             */
            "n-view-link": LocalJSX.NViewLink & JSXBase.HTMLAttributes<HTMLNViewLinkElement>;
            /**
             * @system routing
             */
            "n-view-link-back": LocalJSX.NViewLinkBack & JSXBase.HTMLAttributes<HTMLNViewLinkBackElement>;
            /**
             * Display a list of routes related to the current route.
             * Modes:
             * **siblings**: all routes at the same depth level (nav)
             * **parents**: all parent routes. (breadcrumbs)
             * **children**: all child routes within a hierarchy. (sub-menu)
             * @system routing
             */
            "n-view-link-list": LocalJSX.NViewLinkList & JSXBase.HTMLAttributes<HTMLNViewLinkListElement>;
            /**
             * This element will automatically go to the next
             * view in the view.
             * @system routing
             */
            "n-view-link-next": LocalJSX.NViewLinkNext & JSXBase.HTMLAttributes<HTMLNViewLinkNextElement>;
            /**
             * This element should be placed at the end of the content,
             * inside the n-views element. It shows up when no views
             * above it resolve.
             * @system routing
             */
            "n-view-not-found": LocalJSX.NViewNotFound & JSXBase.HTMLAttributes<HTMLNViewNotFoundElement>;
            /**
             * This element represents a specialized child-route for a parent \<n-view\> element.
             * It represents a sub-route that has required and workflow behaviors.
             * They are used to create, wizards, input workflows, or step by step instructions or
             * wherever you want guided or automatic navigation.
             * @system routing
             * @extension data
             * @extension elements
             */
            "n-view-prompt": LocalJSX.NViewPrompt & JSXBase.HTMLAttributes<HTMLNViewPromptElement>;
            /**
             * The root element is the base container for the view-engine and its
             * child elements. This element should contain root-level HTML that
             * is global to every view along with \<n-view\>
             * elements placed within any global-html.
             * @system routing
             * @extension actions
             * @extension elements
             * @extension provider
             */
            "n-views": LocalJSX.NViews & JSXBase.HTMLAttributes<HTMLNViewsElement>;
        }
    }
}
